'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Grid = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Grid = exports.Grid = {
    id: 1021,
    caption: '宫格',
    editText: '宫格',
    originCaption: '宫格',
    fieldType: 'boolean',
    width: 50,
    height: 50,
    zIndex: 1,
    successToast: null,
    failToast: null,
    icon: '../static/img/widgets/grid-icon.png',
    iconActive: '../static/img/widgets/grid-icon-active.png',
    cssFile: '../static/widgets/Grid/style.css',
    grid: ['style', 'text', 'interactive'],
    scheme: ['widgetStyle', 'imagechoce', 'caption', 'show', 'text', 'switch', 'italic', 'size', 'multi[0]'],
    widgetInfo: {
        dragStatus: {
            top: false,
            bottom: false,
            left: false,
            right: false,
            changeWidth: false,
            changeHeight: false
        }
    },
    dom: 'React.createClass({\n        getInitialState: function(){\n            var widgetInfo = this.props.widgetInfo,\n                gridIcon = widgetInfo.gridIcon ? widgetInfo.gridIcon : "https://200.200.200.58/group2/M01/0D/B7/yMjIOllLZAeAd56OAAAFY5KJ8q0616.png";\n\n            return {\n                icon: gridIcon,\n                gridIcon: gridIcon,\n            };\n        },\n        componentDidMount: function() {\n            var _state = typeof __props !== \'undefined\' ? __props : \'\';\n            var wid = this.props.userWidgetID;\n            if(!_state.hiddenArray && this.props.statusVisibility == 2){\n                AppActions.init(wid);\n            }\n            \n            var widgetInfo = this.props.widgetInfo,\n                gridStyle = widgetInfo.gridStyle ? widgetInfo.gridStyle : 0,\n                gridIcon = widgetInfo.gridIcon ? widgetInfo.gridIcon : "https://200.200.200.58/group2/M01/0D/B7/yMjIOllLZAeAd56OAAAFY5KJ8q0616.png";\n\n            if(gridStyle == 0){ //\u53CC\u9009\u9879\n                console.log(\'componentDidMount\');\n                var speeddialColor = widgetInfo.speeddialColor ? widgetInfo.speeddialColor : "#3b96ff";\n\n                if(!sessionStorage.getItem(this.props.userWidgetID)){\n                    var value = parseInt(this.props.activeStatus) + 1;\n                    var statusvalue = parseInt(this.props.activeStatus) == 1 ? 0 : 1;\n                    if(this.props.userWidgetID && !this.props.statusSet[statusvalue].statusField){\n                        sessionStorage.setItem(this.props.userWidgetID, value);\n                    }\n\n                    var switchClass = this.props.activeStatus == 1 ? \'off\' : \'on\';\n                    var sessionValue = this.props.userWidgetID ? sessionStorage.getItem(this.props.userWidgetID) : \'\';\n                    if(sessionValue){\n                        switchClass = sessionValue == 2 ? \'off\' : \'on\';\n                    }\n                    if(switchClass == \'on\'){\n                        this.imgColor(speeddialColor);\n                    }else{\n                        this.imgColor("#333333");\n                    }\n                }\n                \n               \n            } \n\n        },\n        imgColor: function(color){\n            if(!color) return false;\n            \n            var widgetInfo = this.props.widgetInfo;\n\n\n            var newImage = null;\n            newImage = new Image();\n            newImage.crossOrigin = "anonymous";\n\n            var gridIcon = widgetInfo.gridIcon ? widgetInfo.gridIcon : "https://200.200.200.58/group2/M01/0D/B7/yMjIOllLZAeAd56OAAAFY5KJ8q0616.png";\n            newImage.src = gridIcon;\n\n            var _this = this;\n            newImage.onload = function(){\n                \n                var canvas = document.createElement("canvas");\n                canvas.width = 56;\n                canvas.height = 56;\n                \n                var ctx = canvas.getContext("2d");\n                ctx.drawImage(newImage, 0, 0);\n                \n                var arr = _this.colorRgb(color);\n\n                var imageData = ctx.getImageData(0, 0, 56, 56);\n\n                for(var i = 0; i<imageData.data.length;i+=4){\n                    imageData.data[i] = arr[0];\n                    imageData.data[i + 1] = arr[1];\n                    imageData.data[i + 2] = arr[2];\n                }\n\n                ctx.putImageData(imageData,0,0);\n                var id = _this.props.userImgWidgetID ? _this.props.userImgWidgetID : _this.props.userWidgetID;\n                sessionStorage.setItem(id + \'image\', canvas.toDataURL());\n\n                //\u7EC4\u4EF6\u91CD\u590D\u6E32\u67D3\uFF0C\u627E\u4E0D\u5230~\n                if(!_this.refs[\'gridem\']){\n                    return false;\n                }\n                var gridEm = _this.refs[\'gridem\'].getDOMNode();\n                gridEm.style.backgroundImage = "url("+ sessionStorage.getItem(id + \'image\') +")";\n            }\n        },\n        colorRgb: function(color){\n            var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\n            var sColor = color.toLowerCase();\n            if(sColor && reg.test(sColor)){\n                if(sColor.length === 4){\n                    var sColorNew = "#";\n                    for(var i = 1; i < 4; i += 1){\n                        sColorNew += sColor.slice(i,i+1).concat(sColor.slice(i,i+1));   \n                    }\n                    sColor = sColorNew;\n                }\n                var sColorChange = [];\n                for(var i=1; i<7; i+=2){\n                    sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));  \n                }\n                return sColorChange;\n            }else{\n                return sColor;  \n            }\n        },\n        handleClick: function(){\n            var widgetInfo = this.props.widgetInfo,\n                gridStyle = widgetInfo.gridStyle ? widgetInfo.gridStyle : 0;\n\n            if(gridStyle == 0){ //\u53CC\u9009\u9879\n                var value,statusvalue,eventvalue;\n                \n                if(sessionStorage.getItem(this.props.userWidgetID)){\n                    value = sessionStorage.getItem(this.props.userWidgetID) == 1 ? 2 : 1;\n                    eventvalue = value - 1;\n                    statusvalue = eventvalue == 1 ? 0 : 1;\n                }else{\n                    eventvalue = parseInt(this.props.activeStatus);\n                    value = eventvalue + 1;\n                    statusvalue = eventvalue == 1 ? 0 : 1;\n                }\n                \n                sessionStorage.setItem(this.props.userWidgetID, value);\n\n                var userWidgetID = this.props.userWidgetID;\n                var arg = {};\n                arg.userWidgetID = userWidgetID;\n                arg.eventType = 3;\n                arg.showWidgetList = [];\n                arg.status = {\n                    userWidgetID:{\n                        statusField:this.props.statusSet[statusvalue].statusField,\n                        statusValue:this.props.statusSet[statusvalue].statusValue\n                    }\n                };\n                AppActions.toggle(arg);\n\n                var item = this.props.eventSet[eventvalue];\n                if (item.eventType == 1) {\n                    if(item.commandType == 2){\n                        AppActions.complexCommand(item.commandConfigList);\n                    }else{\n                        AppActions.trigger(item.eventField, item.eventValue, item.updateFlag,item.byteLength);\n                    }\n                } else if (item.eventType == 2) {\n                    location.hash = \'#/page/\' + item.checkedPageId\n                }else if (item.eventType == 3 || item.eventType == 4) {\n                    item.userWidgetID = userWidgetID;\n                    item.status = item[\'activeStatusField\'];\n                    AppActions.toggle(item);\n                }\n                \n\n                var speeddialColor = widgetInfo.speeddialColor ? widgetInfo.speeddialColor : "#3b96ff";\n                var value = sessionStorage.getItem(this.props.userWidgetID);\n\n                if(value == 2){\n                    this.imgColor(speeddialColor);\n                }else{\n                    this.imgColor("#333333");\n                }\n\n            }\n        },\n        render: function(){\n            var _this = this;\n            var widgetInfo = this.props.widgetInfo;\n\n            var text = this.props.text,\n                speeddialStyle = widgetInfo.speeddialStyle ? widgetInfo.speeddialStyle : 0,\n                speeddialShape = widgetInfo.speeddialShape ? widgetInfo.speeddialShape : 0,\n                speeddialColor = widgetInfo.speeddialColor ? widgetInfo.speeddialColor : "#3b96ff",\n                gridStyle = widgetInfo.gridStyle ? widgetInfo.gridStyle : 0;\n            \n            var gridIcon = "https://200.200.200.58/group2/M01/0D/B7/yMjIOllLZAeAd56OAAAFY5KJ8q0616.png";\n            if(sessionStorage.getItem(this.props.userImgWidgetID + \'image\')){\n                gridIcon = sessionStorage.getItem(this.props.userImgWidgetID + \'image\');\n            }\n            \n            var switchClass = this.props.activeStatus == 1 ? \'off\' : \'on\';\n            var sessionValue = this.props.userWidgetID ? sessionStorage.getItem(this.props.userWidgetID) : \'\';\n            if(sessionValue){\n                switchClass = sessionValue == 2 ? \'off\' : \'on\';\n            }\n            var _state = typeof __props !== \'undefined\' ? __props : \'\';\n            if(_state){\n                this.props.statusSet.map(function(item,index){\n                    if(item.statusValue && item.statusValue == _state[item.statusField]){\n                        if(index == 1){\n                            this.imgColor("#333333");\n                        }else{\n                            this.imgColor(speeddialColor);\n                        }\n                    }\n                });\n            }\n\n            if(switchClass == \'on\'){\n                this.imgColor(speeddialColor);\n            }else{\n                this.imgColor("#333333");\n            }\n\n\n            \n            return (\n                <div {...this.props} ref={this.props.ref}  className="grid" >\n                    <div className={"grid-content grid-style" + speeddialStyle} onTouchEnd={this.handleClick}>\n                        <em className={speeddialShape == 0 ? "gridem" : "gridem circle"} id={this.props.userWidgetID} ref="gridem" style={{backgroundImage: "url("+ gridIcon +")",borderColor: speeddialColor}}></em>\n                        <img src={this.state.icon} ref="gridimg" className="gridimg" crossOrigin="anonymous"/>\n                        <span>{text}</span>\n                    </div>\n                </div>\n            )\n        }\n    })'
};